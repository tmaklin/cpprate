// cpprate: Variable Selection in Black Box Methods with RelATive cEntrality (RATE) Measures
// https://github.com/tmaklin/cpprate
// Copyright (c) 2023 Tommi MÃ¤klin (tommi@maklin.fi)
//
// BSD-3-Clause license
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     (1) Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//
//     (2) Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in
//     the documentation and/or other materials provided with the
//     distribution.
//
//     (3)The name of the author may not be used to
//     endorse or promote products derived from this software without
//     specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
// IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
#ifndef CPPRATE_KLD_UNIT_TEST_HPP
#define CPPRATE_KLD_UNIT_TEST_HPP

#include <cstddef>
#include <vector>

#include <Eigen/SparseCore>
#include <Eigen/Dense>

#include "gtest/gtest.h"

class KldTest : public ::testing::Test {
  protected:
    double test_tolerance = 1e-6;

    void SetUp() override {
	// Parameters
	this->n_design_dim = 20;
	this->n_f_draws = 100;
	this->n_obs = 10;

	std::vector<double> cov_beta_vec = { 0.4288628,-0.107379,0.07459704,0.07459704,-3.057965e-18,0.07459704,0.1199967,0.08583288,0.07459704,0.02783742,-0.2984972,-0.03925313,-0.2239002,0.08583288,-0.03925313,0,0.1974447,0.1303656,0.07459704,0,-0.107379,0.3285365,-0.04328023,-0.04328023,5.326212e-20,-0.04328023,-0.3515651,-0.1497116,-0.04328023,0.1028234,0.1797604,-0.003582608,0.1364801,-0.1497116,-0.003582608,0,-0.1559008,0.07238139,-0.04328023,0,0.07459704,-0.04328023,0.04738202,0.04738202,-1.5941e-18,0.04738202,0.0471579,0.02295485,0.04738202,0.01397501,-0.08358494,-0.02025084,-0.03620292,0.02295485,-0.02025084,0,0.05053275,-0.008987903,0.04738202,0,0.07459704,-0.04328023,0.04738202,0.04738202,-1.5941e-18,0.04738202,0.0471579,0.02295485,0.04738202,0.01397501,-0.08358494,-0.02025084,-0.03620292,0.02295485,-0.02025084,0,0.05053275,-0.008987903,0.04738202,0,-3.057965e-18,5.326212e-20,-1.5941e-18,-1.5941e-18,7.407081e-35,-1.5941e-18,1.693808e-18,1.401992e-19,-1.5941e-18,-1.172576e-18,2.819138e-18,9.931892e-19,1.225038e-18,1.401992e-19,9.931892e-19,0,-3.969033e-20,-2.388269e-19,-1.5941e-18,0,0.07459704,-0.04328023,0.04738202,0.04738202,-1.5941e-18,0.04738202,0.0471579,0.02295485,0.04738202,0.01397501,-0.08358494,-0.02025084,-0.03620292,0.02295485,-0.02025084,0,0.05053275,-0.008987903,0.04738202,0,0.1199967,-0.3515651,0.0471579,0.0471579,1.693808e-18,0.0471579,0.7096849,0.2469068,0.0471579,-0.101178,-0.2519383,0.03092463,-0.2047803,0.2469068,0.03092463,0,0.4643292,-0.1319415,0.0471579,0,0.08583288,-0.1497116,0.02295485,0.02295485,1.401992e-19,0.02295485,0.2469068,0.3205861,0.02295485,-0.08320124,-0.1369298,-0.01551193,-0.1139749,0.3205861,-0.01551193,0,-0.003259828,-0.05109692,0.02295485,0,0.07459704,-0.04328023,0.04738202,0.04738202,-1.5941e-18,0.04738202,0.0471579,0.02295485,0.04738202,0.01397501,-0.08358494,-0.02025084,-0.03620292,0.02295485,-0.02025084,0,0.05053275,-0.008987903,0.04738202,0,0.02783742,0.1028234,0.01397501,0.01397501,-1.172576e-18,0.01397501,-0.101178,-0.08320124,0.01397501,0.4538025,-0.02195677,0.004228135,-0.007981762,-0.08320124,0.004228135,0,-0.346999,0.005880653,0.01397501,0,-0.2984972,0.1797604,-0.08358494,-0.08358494,2.819138e-18,-0.08358494,-0.2519383,-0.1369298,-0.08358494,-0.02195677,0.3592114,0.03455226,0.2756265,-0.1369298,0.03455226,0,-0.2725027,0.0607142,-0.08358494,0,-0.03925313,-0.003582608,-0.02025084,-0.02025084,9.931892e-19,-0.02025084,0.03092463,-0.01551193,-0.02025084,0.004228135,0.03455226,0.2446508,0.01430142,-0.01551193,0.2446508,0,0.004073554,-0.004700868,-0.02025084,0,-0.2239002,0.1364801,-0.03620292,-0.03620292,1.225038e-18,-0.03620292,-0.2047803,-0.1139749,-0.03620292,-0.007981762,0.2756265,0.01430142,0.2394236,-0.1139749,0.01430142,0,-0.22197,0.0517263,-0.03620292,0,0.08583288,-0.1497116,0.02295485,0.02295485,1.401992e-19,0.02295485,0.2469068,0.3205861,0.02295485,-0.08320124,-0.1369298,-0.01551193,-0.1139749,0.3205861,-0.01551193,0,-0.003259828,-0.05109692,0.02295485,0,-0.03925313,-0.003582608,-0.02025084,-0.02025084,9.931892e-19,-0.02025084,0.03092463,-0.01551193,-0.02025084,0.004228135,0.03455226,0.2446508,0.01430142,-0.01551193,0.2446508,0,0.004073554,-0.004700868,-0.02025084,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.1974447,-0.1559008,0.05053275,0.05053275,-3.969033e-20,0.05053275,0.4643292,-0.003259828,0.05053275,-0.346999,-0.2725027,0.004073554,-0.22197,-0.003259828,0.004073554,0,0.9311899,-0.07505805,0.05053275,0,0.1303656,0.07238139,-0.008987903,-0.008987903,-2.388269e-19,-0.008987903,-0.1319415,-0.05109692,-0.008987903,0.005880653,0.0607142,-0.004700868,0.0517263,-0.05109692,-0.004700868,0,-0.07505805,0.1910798,-0.008987903,0,0.07459704,-0.04328023,0.04738202,0.04738202,-1.5941e-18,0.04738202,0.0471579,0.02295485,0.04738202,0.01397501,-0.08358494,-0.02025084,-0.03620292,0.02295485,-0.02025084,0,0.05053275,-0.008987903,0.04738202,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
	std::vector<double> lambda_vec = { 1.196489,-0.1862078,-0.1695769,-0.1695769,-9.635527e-17,-0.1695769,0.05472666,-0.05818686,-0.1695769,-0.02964715,0.08177842,0.06275502,-0.08779845,-0.05818686,0.06275502,0,-0.1254255,1.278267,-0.1695769,0,-0.1862078,3.807042,0.2329039,0.2329039,-8.834503e-17,0.2329039,0.1767855,1.260359,0.2329039,1.11894,0.2454126,0.07814661,0.4783164,1.260359,0.07814661,0,1.359116,0.0592048,0.2329039,0,-0.1695769,0.2329039,1.019319,1.019319,-2.943694e-16,1.019319,-0.09366569,0.118047,1.019319,-0.07074529,0.01805075,0.1793852,1.03737,0.118047,0.1793852,0,0.07388568,-0.1515261,1.019319,0,-0.1695769,0.2329039,1.019319,1.019319,-2.943694e-16,1.019319,-0.09366569,0.118047,1.019319,-0.07074529,0.01805075,0.1793852,1.03737,0.118047,0.1793852,0,0.07388568,-0.1515261,1.019319,0,-9.635527e-17,-8.834503e-17,-2.943694e-16,-2.943694e-16,3.152589e-31,-2.943694e-16,-3.872326e-16,1.029745e-16,-2.943694e-16,-4.081563e-16,-1.492039e-16,2.673426e-16,-4.435733e-16,1.029745e-16,2.673426e-16,0,-2.119189e-17,-2.455592e-16,-2.943694e-16,0,-0.1695769,0.2329039,1.019319,1.019319,-2.943694e-16,1.019319,-0.09366569,0.118047,1.019319,-0.07074529,0.01805075,0.1793852,1.03737,0.118047,0.1793852,0,0.07388568,-0.1515261,1.019319,0,0.05472666,0.1767855,-0.09366569,-0.09366569,-3.872326e-16,-0.09366569,2.060712,-0.01488769,-0.09366569,1.084583,0.9591771,-0.2392804,0.8655114,-0.01488769,-0.2392804,0,0.2086257,1.013904,-0.09366569,0,-0.05818686,1.260359,0.118047,0.118047,1.029745e-16,0.118047,-0.01488769,1.039649,0.118047,-0.02173387,0.07189591,0.08424262,0.1899429,1.039649,0.08424262,0,0.1556606,0.01370905,0.118047,0,-0.1695769,0.2329039,1.019319,1.019319,-2.943694e-16,1.019319,-0.09366569,0.118047,1.019319,-0.07074529,0.01805075,0.1793852,1.03737,0.118047,0.1793852,0,0.07388568,-0.1515261,1.019319,0,-0.02964715,1.11894,-0.07074529,-0.07074529,-4.081563e-16,-0.07074529,1.084583,-0.02173387,-0.07074529,1.916492,0.09865149,-0.1041797,0.0279062,-0.02173387,-0.1041797,0,0.2101126,0.06900434,-0.07074529,0,0.08177842,0.2454126,0.01805075,0.01805075,-1.492039e-16,0.01805075,0.9591771,0.07189591,0.01805075,0.09865149,0.9540431,-0.1313201,0.9720938,0.07189591,-0.1313201,0,0.07999916,1.035821,0.01805075,0,0.06275502,0.07814661,0.1793852,0.1793852,2.673426e-16,0.1793852,-0.2392804,0.08424262,0.1793852,-0.1041797,-0.1313201,1.093249,0.04806513,0.08424262,1.093249,0,-0.009876653,-0.06856504,0.1793852,0,-0.08779845,0.4783164,1.03737,1.03737,-4.435733e-16,1.03737,0.8655114,0.1899429,1.03737,0.0279062,0.9720938,0.04806513,2.009464,0.1899429,0.04806513,0,0.1538848,0.8842954,1.03737,0,-0.05818686,1.260359,0.118047,0.118047,1.029745e-16,0.118047,-0.01488769,1.039649,0.118047,-0.02173387,0.07189591,0.08424262,0.1899429,1.039649,0.08424262,0,0.1556606,0.01370905,0.118047,0,0.06275502,0.07814661,0.1793852,0.1793852,2.673426e-16,0.1793852,-0.2392804,0.08424262,0.1793852,-0.1041797,-0.1313201,1.093249,0.04806513,0.08424262,1.093249,0,-0.009876653,-0.06856504,0.1793852,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.1254255,1.359116,0.07388568,0.07388568,-2.119189e-17,0.07388568,0.2086257,0.1556606,0.07388568,0.2101126,0.07999916,-0.009876653,0.1538848,0.1556606,-0.009876653,0,1.121969,-0.04542636,0.07388568,0,1.278267,0.0592048,-0.1515261,-0.1515261,-2.455592e-16,-0.1515261,1.013904,0.01370905,-0.1515261,0.06900434,1.035821,-0.06856504,0.8842954,0.01370905,-0.06856504,0,-0.04542636,2.314089,-0.1515261,0,-0.1695769,0.2329039,1.019319,1.019319,-2.943694e-16,1.019319,-0.09366569,0.118047,1.019319,-0.07074529,0.01805075,0.1793852,1.03737,0.118047,0.1793852,0,0.07388568,-0.1515261,1.019319,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };

	std::vector<double> col_means_vec = { -4.443478,1.481216,-0.8958073,-0.8958073,4.66693e-17,-0.8958073,-1.042367,3.465682,-0.8958073,-1.620646,5.081105,-0.5907243,4.185298,3.465682,-0.5907243,0,-6.487291,0.6376266,-0.8958073,0 };

	this->cov_fullrank.resize(this->n_design_dim, this->n_design_dim);
	for (size_t i = 0; i < this->n_design_dim; ++i) {
	    for (size_t j = 0; j < this->n_design_dim; ++j) {
		this->cov_fullrank(i, j) = cov_beta_vec[i*this->n_design_dim + j];
	    }
	}

	this->lambda_fullrank.resize(this->n_design_dim, this->n_design_dim);
	for (size_t i = 0; i < this->n_design_dim; ++i) {
	    for (size_t j = 0; j < this->n_design_dim; ++j) {
		this->lambda_fullrank(i, j) = lambda_vec[i*this->n_design_dim + j];
	    }
	}

	this->col_means_fullrank.resize(this->n_design_dim);
	for (size_t i = 0;i < this->n_design_dim; ++i) {
	    this->col_means_fullrank[i] = col_means_vec[i];
	}

    }

    void TearDown() override {
	this->n_design_dim = 0;
	this->n_f_draws = 0;
	this->n_obs = 0;
	this->cov_fullrank.resize(0, 0);
	this->lambda_fullrank.resize(0, 0);
	this->col_means_fullrank.resize(0, 0);
    }

    // Test parameters
    size_t n_design_dim;
    size_t n_f_draws;
    size_t n_obs;

    // Input data
    Eigen::MatrixXd cov_fullrank;
    Eigen::MatrixXd lambda_fullrank;
    Eigen::VectorXd col_means_fullrank;

    // Expected values
    static std::vector<double> sherman_r_expected;
    static std::vector<double> expected_KLD;

};
std::vector<double> KldTest::sherman_r_expected = { 1.194607,-0.1483072,-0.170206,-0.170206,-9.615463e-17,-0.170206,0.04609308,-0.05372744,-0.170206,-0.020629,0.08559477,0.06275502,-0.08462315,-0.05372744,0.06275502,0,-0.1164074,1.280167,-0.170206,0,-0.151049,3.303529,0.2445113,0.2445113,-9.202349e-17,0.2445113,0.3500671,1.182102,0.2445113,0.9673163,0.1780246,0.07814661,0.4218986,1.182102,0.07814661,0,1.207492,0.02503628,0.2445113,0,-0.1702058,0.2448688,1.019109,1.019109,-2.943025e-16,1.019109,-0.09658065,0.1195238,1.019109,-0.06777868,0.01931575,0.1793852,1.038423,0.1195238,0.1793852,0,0.07685229,-0.1508948,1.019109,0,-0.1702058,0.2448688,1.019109,1.019109,-2.943025e-16,1.019109,-0.09658065,0.1195238,1.019109,-0.06777868,0.01931575,0.1793852,1.038423,0.1195238,0.1793852,0,0.07685229,-0.1508948,1.019109,0,-9.615463e-17,-9.202349e-17,-2.943025e-16,-2.943025e-16,3.152376e-31,-2.943025e-16,-3.862962e-16,1.025063e-16,-2.943025e-16,-4.090926e-16,-1.496052e-16,2.673426e-16,-4.439077e-16,1.025063e-16,2.673426e-16,0,-2.212823e-17,-2.457598e-16,-2.943025e-16,0,-0.1702058,0.2448688,1.019109,1.019109,-2.943025e-16,1.019109,-0.09658065,0.1195238,1.019109,-0.06777868,0.01931575,0.1793852,1.038423,0.1195238,0.1793852,0,0.07685229,-0.1508948,1.019109,0,0.0460378,0.4014842,-0.09659134,-0.09659134,-3.862962e-16,-0.09659134,2.022286,0.006457522,-0.09659134,1.128913,0.9773768,-0.2392804,0.8805985,0.006457522,-0.2392804,0,0.2529557,1.022862,-0.09659134,0,-0.05380455,1.168536,0.1195141,0.1195141,1.025063e-16,0.1195141,0.005089394,1.029198,0.1195141,-0.04296263,0.06295787,0.08424262,0.1825109,1.029198,0.08424262,0,0.1344319,0.00926931,0.1195141,0,-0.1702058,0.2448688,1.019109,1.019109,-2.943025e-16,1.019109,-0.09658065,0.1195238,1.019109,-0.06777868,0.01931575,0.1793852,1.038423,0.1195238,0.1793852,0,0.07685229,-0.1508948,1.019109,0,-0.02078586,0.9694606,-0.06780034,-0.06780034,-4.090926e-16,-0.06780034,1.126628,-0.04210528,-0.06780034,1.876166,0.08116449,-0.1041797,0.01331215,-0.04210528,-0.1041797,0,0.1697861,0.06022192,-0.06780034,0,0.08558892,0.1847864,0.01931428,0.01931428,-1.496052e-16,0.01931428,0.9774883,0.06323222,0.01931428,0.081629,0.946598,-0.1313201,0.9658736,0.06323222,-0.1313201,0,0.06297667,1.03207,0.01931428,0,0.06275502,0.07814661,0.1793852,0.1793852,2.673426e-16,0.1793852,-0.2392804,0.08424262,0.1793852,-0.1041797,-0.1313201,1.093249,0.04806513,0.08424262,1.093249,0,-0.009876653,-0.06856504,0.1793852,0,-0.08462905,0.4262227,1.038422,1.038422,-4.439077e-16,1.038422,0.8806329,0.1826919,1.038422,0.01359958,0.9658665,0.04806513,2.004264,0.1826919,0.04806513,0,0.1395782,0.8811634,1.038422,0,-0.05380455,1.168536,0.1195141,0.1195141,1.025063e-16,0.1195141,0.005089394,1.029198,0.1195141,-0.04296263,0.06295787,0.08424262,0.1825109,1.029198,0.08424262,0,0.1344319,0.00926931,0.1195141,0,0.06275502,0.07814661,0.1793852,0.1793852,2.673426e-16,0.1793852,-0.2392804,0.08424262,0.1793852,-0.1041797,-0.1313201,1.093249,0.04806513,0.08424262,1.093249,0,-0.009876653,-0.06856504,0.1793852,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.1166632,1.174435,0.0768196,0.0768196,-2.212823e-17,0.0768196,0.2485313,0.1347459,0.0768196,0.1676,0.06211334,-0.009876653,0.139014,0.1347459,-0.009876653,0,1.079457,-0.05430824,0.0768196,0,1.280164,0.02643867,-0.1508953,-0.1508953,-2.457598e-16,-0.1508953,1.022857,0.009330362,-0.1508953,0.06031034,1.032064,-0.06856504,0.8811612,0.009330362,-0.06856504,0,-0.05412035,2.312204,-0.1508953,0,-0.1702058,0.2448688,1.019109,1.019109,-2.943025e-16,1.019109,-0.09658065,0.1195238,1.019109,-0.06777868,0.01931575,0.1793852,1.038423,0.1195238,0.1793852,0,0.07685229,-0.1508948,1.019109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
std::vector<double> KldTest::expected_KLD = { 46.7013731559339, 18.0326943349702, 11.3476008015389, 11.3476008015389, 0.0, 11.3476008015389, 6.92892677441328, 68.0601282048986, 11.3476008015389, 11.1261904144762, 153.373975215714, 0.439287705790222, 296.568244722871, 68.0601282048987, 0.439287705790222, 0, 205.01033657952, 1.93746322665465, 11.3476008015389, 0.0 };

#endif
